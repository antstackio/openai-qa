AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  StageName:
    Type: String
    Default: Prod

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - POST
          - OPTIONS
        AllowHeaders:
          - '*'
        AllowCredentials: "'true'"
        ExposeHeaders: "'*'"
      # Add a definition body to handle CORS preflight requests
      DefinitionBody:
        openapi: 3.0
        info:
          title: !Sub "${AWS::StackName}"
          version: '1.0'
        paths:
          /answer:
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: string
                        Access-Control-Allow-Methods:
                          type: string
                        Access-Control-Allow-Headers:
                          type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    passThroughBehavior: when_no_match
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: string
                        Access-Control-Allow-Methods:
                          type: string
                        Access-Control-Allow-Headers:
                          type: string
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InferenceFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    passThroughBehavior: when_no_match      
  InferenceFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Timeout: 30
      MemorySize: 256
      Architectures:
        - x86_64
      Policies:
        - AmazonSSMReadOnlyAccess
      Events:
        Inference:
          Type: HttpApi
          Properties:
            Path: /answer
            Method: post
            ApiId: !Ref HttpApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./app
      DockerTag: python3.9-v1
Outputs:
  InferenceApi:
    Description: "API Gateway endpoint URL for Prod stage for Inference function"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/answer"
